{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Downloads/space-bot/Character Archivist System (CAS) 203d3716a10c808881d7cd398257b04d/relationship_therapist_system/MirrorCore_UI_Integration_Files/react-app/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Create the authentication context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// Provider component that wraps the app and makes auth object available to any child component that calls useAuth()\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is logged in on initial load\n  useEffect(() => {\n    const storedUser = localStorage.getItem('mirrorcore_user');\n    if (storedUser) {\n      try {\n        setCurrentUser(JSON.parse(storedUser));\n      } catch (error) {\n        console.error('Error parsing stored user:', error);\n        localStorage.removeItem('mirrorcore_user');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Login function\n  const login = userData => {\n    // In a real app, this would validate credentials with a backend\n    // For now, we'll just store the user data in localStorage\n    localStorage.setItem('mirrorcore_user', JSON.stringify(userData));\n    setCurrentUser(userData);\n    return true;\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('mirrorcore_user');\n    setCurrentUser(null);\n  };\n\n  // Context value\n  const value = {\n    currentUser,\n    login,\n    logout,\n    isAuthenticated: !!currentUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","error","console","removeItem","login","userData","setItem","stringify","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/macbook/Downloads/space-bot/Character Archivist System (CAS) 203d3716a10c808881d7cd398257b04d/relationship_therapist_system/MirrorCore_UI_Integration_Files/react-app/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Create the authentication context\nconst AuthContext = createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\n// Provider component that wraps the app and makes auth object available to any child component that calls useAuth()\nconst AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is logged in on initial load\n  useEffect(() => {\n    const storedUser = localStorage.getItem('mirrorcore_user');\n    if (storedUser) {\n      try {\n        setCurrentUser(JSON.parse(storedUser));\n      } catch (error) {\n        console.error('Error parsing stored user:', error);\n        localStorage.removeItem('mirrorcore_user');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Login function\n  const login = (userData) => {\n    // In a real app, this would validate credentials with a backend\n    // For now, we'll just store the user data in localStorage\n    localStorage.setItem('mirrorcore_user', JSON.stringify(userData));\n    setCurrentUser(userData);\n    return true;\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('mirrorcore_user');\n    setCurrentUser(null);\n  };\n\n  // Context value\n  const value = {\n    currentUser,\n    login,\n    logout,\n    isAuthenticated: !!currentUser\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMO,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,OAAON,UAAU,CAACI,WAAW,CAAC;AAChC,CAAC;;AAED;AAAAE,EAAA,CAJaD,OAAO;AAKpB,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACrC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAE,SAAS,CAAC,MAAM;IACd,MAAMa,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAC1D,IAAIF,UAAU,EAAE;MACd,IAAI;QACFH,cAAc,CAACM,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;MACxC,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDJ,YAAY,CAACM,UAAU,CAAC,iBAAiB,CAAC;MAC5C;IACF;IACAR,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMS,KAAK,GAAIC,QAAQ,IAAK;IAC1B;IACA;IACAR,YAAY,CAACS,OAAO,CAAC,iBAAiB,EAAEP,IAAI,CAACQ,SAAS,CAACF,QAAQ,CAAC,CAAC;IACjEZ,cAAc,CAACY,QAAQ,CAAC;IACxB,OAAO,IAAI;EACb,CAAC;;EAED;EACA,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACnBX,YAAY,CAACM,UAAU,CAAC,iBAAiB,CAAC;IAC1CV,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;;EAED;EACA,MAAMgB,KAAK,GAAG;IACZjB,WAAW;IACXY,KAAK;IACLI,MAAM;IACNE,eAAe,EAAE,CAAC,CAAClB;EACrB,CAAC;EAED,oBACEP,OAAA,CAACC,WAAW,CAACyB,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAAnB,QAAA,EAChC,CAACI,OAAO,IAAIJ;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;AAACxB,GAAA,CA9CIF,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AAgDlB,eAAeA,YAAY;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}